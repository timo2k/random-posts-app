name: Build and Deploy to AWS ECR

on:
  push:
    branches:
      - main

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          tags: |
            ${{ secrets.AWS_ECR_REGISTRY }}/${{ secrets.AWS_ECR_REPOSITORY }}:${{ github.sha }}
            ${{ secrets.AWS_ECR_REGISTRY }}/${{ secrets.AWS_ECR_REPOSITORY }}:latest

  # deploy_to_server:
  #   runs-on: ubuntu-latest
  #   needs: build_and_deploy

  #   steps:
  #     - name: Install SSH client
  #       run: sudo apt-get install -y openssh-client

  #     - name: Set up SSH key
  #       run: |
  #         mkdir -p ~/.ssh
  #         echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
  #         chmod 600 ~/.ssh/id_rsa
  #         ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

  #     - name: Deploy and start application on server
  #       env:
  #         SERVER_USER: ${{ secrets.SERVER_USER }}
  #         SERVER_HOST: ${{ secrets.SERVER_HOST }}
  #         CONTAINER_NAME: your_container_name
  #         IMAGE_NAME: ${{ secrets.AWS_ECR_REGISTRY }}/${{ secrets.AWS_ECR_REPOSITORY }}
  #       run: |
  #       ssh $SERVER_USER@$SERVER_HOST <<-EOF
  #         aws configure set aws_access_key_id ${{ secrets.AWS_SERVER_ACCESS_KEY_ID }}
  #         aws configure set aws_secret_access_key ${{ secrets.AWS_SERVER_SECRET_ACCESS_KEY }}
  #         aws configure set region ${{ secrets.AWS_REGION }}

  #         aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REGISTRY }}

  #         docker pull $IMAGE_NAME:${{ github.sha }}
  #         if docker ps -a --filter name=$CONTAINER_NAME --filter status=running | grep $CONTAINER_NAME
  #         then
  #           docker stop $CONTAINER_NAME
  #           docker rm $CONTAINER_NAME
  #         fi
  #         docker run -d --name $CONTAINER_NAME \
  #           --network nginx-proxy-network \
  #           -e DATABASE_URL="postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }}" \
  #           -e PRISMA_MIGRATE_ON_START=true \
  #           $IMAGE_NAME:${{ github.sha }}
  #       EOF
